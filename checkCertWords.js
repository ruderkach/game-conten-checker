const fs = require('fs');
const path = require('path');
const xml2js = require('xml2js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤ –∏ –∑–∞–º–µ–Ω
const languageConfig = {
    en: {
        certs: {
            gbr: ['PRIZES', 'PRIZE', 'Prize'],
            ltu: ['PRIZES', 'PRIZE', 'Prize'],
            en: ['JACKPOTS', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTS: ['PRIZES'],
            JACKPOT: ['PRIZE'],
            Jackpot: ['Prize'],
        },
    },
    de: {
        certs: {
            deu: ['HAUPTGEWINNE', 'HAUPTGEWINN', 'Hauptgewinn'],
            de: ['JACKPOTS', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTS: ['HAUPTGEWINNE'],
            JACKPOT: ['HAUPTGEWINN'],
            Jackpot: ['Hauptgewinn'],
        },
    },
    ru: {
        certs: {
            blr: ['–ü–†–ò–ó–´', '–ü–†–ò–ó', '–ü—Ä–∏–∑'],
            ru: ['–î–ñ–ï–ö–ü–û–¢–´', '–î–ñ–ï–ö–ü–û–¢', '–î–∂–µ–∫–ø–æ—Ç'],

        },
        mappings: {
            –î–ñ–ï–ö–ü–û–¢–´: ['–ü–†–ò–ó–´'],
            –î–ñ–ï–ö–ü–û–¢: ['–ü–†–ò–ó'],
            –î–∂–µ–∫–ø–æ—Ç: ['–ü—Ä–∏–∑'],
        },
    },
    hr: {
        certs: {
            hrv: ['NAGRADNI', 'NAGRADA', 'Nagrada'],
            hr: ['JACKPOTI', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTI: ['NAGRADNI'],
            JACKPOT: ['NAGRADA'],
            Jackpot: ['Nagrada'],
        },
    },
    es: {
        certs: {
            esp: ['PREMIOS', 'PREMIO', 'Premio'],
            es: ['JACKPOTS', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTS: ['PREMIOS'],
            JACKPOT: ['PREMIO'],
            Jackpot: ['Premio'],
        },
    },
    pt: {
        certs: {
            prt: ['PR√äMIOS', 'PR√äMIO', 'Pr√™mio'],
            pt: ['JACKPOTS', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTS: ['PR√äMIOS'],
            JACKPOT: ['PR√äMIO'],
            Jackpot: ['Pr√™mio'],
        },
    },
    bg: {
        certs: {
            bgr: ['–ù–ê–ì–†–ê–î–ò', '–ù–ê–ì–†–ê–î–ê', '–ù–∞–≥—Ä–∞–¥–∞'],
            bg: ['–î–ñ–ê–ö–ü–û–¢', '–î–ñ–ê–ö–ü–û–¢', '–î–∂–∞–∫–ø–æ—Ç'],

        },
        mappings: {
            –î–ñ–ê–ö–ü–û–¢: ['–ù–ê–ì–†–ê–î–ò'],
            –î–ñ–ê–ö–ü–û–¢: ['–ù–ê–ì–†–ê–î–ê'],
            –î–∂–∞–∫–ø–æ—Ç: ['–ù–∞–≥—Ä–∞–¥–∞'],
        },
    },
    da: {
        certs: {
            dnk: ['PR√ÜMIER', 'PR√ÜMIE', 'Pr√¶mie'],
            da: ['JACKPOTS', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOTS: ['PR√ÜMIER'],
            JACKPOT: ['PR√ÜMIE'],
            Jackpot: ['Pr√¶mie'],
        },
    },
    it: {
        certs: {
            ita: ['PREMI', 'PREMIO', 'Premio'],
            it: ['JACKPOT', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOT: ['PREMI'],
            JACKPOT: ['PREMIO'],
            Jackpot: ['Premio'],
        },
    },
    sv: {
        certs: {
            swe: ['PRISER', 'PRIS', 'Pris'],
            sv: ['JACKPOTTAR', 'JACKPOTT', 'Jackpott'],

        },
        mappings: {
            JACKPOTTAR: ['PRISER'],
            JACKPOTT: ['PRIS'],
            Jackpott: ['Pris'],
        },
    },
    nl: {
        certs: {
            nld: ['PRIJZEN', 'PRIJS', 'Prijs'],
            nl: ['JACKPOT', 'JACKPOT', 'Jackpot'],

        },
        mappings: {
            JACKPOT: ['PRIJZEN'],
            JACKPOT: ['PRIJS'],
            Jackpot: ['Prijs'],
        },
    },
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const localeDir = args[0];

if (!localeDir) {
    console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.");
    process.exit(1);
}

if (!fs.existsSync(localeDir) || !fs.lstatSync(localeDir).isDirectory()) {
    console.error(`‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${localeDir}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π.`);
    process.exit(1);
}

// –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞
async function parseXmlFile(filePath) {
    const xmlContent = fs.readFileSync(filePath, "utf-8");
    return xml2js.parseStringPromise(xmlContent);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
function checkStringTag(stringTag, langConfig) {
    const certs = langConfig.certs || {};
    const mappings = langConfig.mappings || {};
    const defaultWords = certs.en || [];
    const certParams = Object.keys(certs);
    const results = [];
    const foundCerts = {};

    // –ü–æ–∏—Å–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–≥–µ
    const allWords = stringTag.string?.map((tag) => tag._?.trim()) || [];
    const foundDefaults = allWords.filter((word) => defaultWords.includes(word));

    if (foundDefaults.length === 0) {
        return { valid: true, reason: "–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", results: [] };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö cert –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–≥–µ
    certParams.forEach((cert) => {
        const validWords = certs[cert];
        const certTag = stringTag.string?.find((tag) => tag.$?.cert === cert);

        if (certTag) {
            const word = certTag._?.trim();
            if (validWords.includes(word)) {
                foundCerts[cert] = word;
                results.push({ cert, word, valid: true });
            } else {
                results.push({ cert, word, valid: false });
            }
        } else {
            results.push({ cert, word: null, valid: false });
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    Object.entries(mappings).forEach(([defaultWord, validReplacements]) => {
        if (foundDefaults.includes(defaultWord)) {
            const matches = allWords.filter((word) => validReplacements.includes(word));
            if (matches.length > 0) {
                results.push({ defaultWord, matches, valid: true });
            } else {
                results.push({ defaultWord, matches, valid: false });
            }
        }
    });

    return { valid: results.every((r) => r.valid), reason: "", results };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
async function checkLocaleFiles() {
    const files = fs.readdirSync(localeDir).filter((file) => file.endsWith(".xml"));
    if (files.length === 0) {
        console.error("‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç XML-—Ñ–∞–π–ª—ã.");
        process.exit(1);
    }

    for (const file of files) {
        const lang = path.basename(file, ".xml");
        const langConfig = languageConfig[lang];
        if (!langConfig) {
            // console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª ${file}, —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`);
            continue;
        }

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${file}`);
        const filePath = path.join(localeDir, file);
        const parsedXml = await parseXmlFile(filePath);

        const stringTags = parsedXml.config?.string || [];
        let validFile = true;

        stringTags.forEach((stringTag) => {
            const { valid, reason, results } = checkStringTag(stringTag, langConfig);

            if (!valid && reason !== "–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç") {
                validFile = false;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ID="${stringTag.$?.id || "–Ω–µ—Ç ID"}"`);
                results.forEach((result) => {
                    console.error(
                        `    ‚û°Ô∏è cert="${result.cert || result.defaultWord}" —Å–ª–æ–≤–æ="${result.word || result.matches}" –≤–∞–ª–∏–¥–Ω–æ=${result.valid}`
                    );
                });
            }
        });

        if (validFile) {
            console.log(`‚úÖ –§–∞–π–ª ${file} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.`);
        } else {
            console.error(`‚ùå –§–∞–π–ª ${file} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏.`);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkLocaleFiles().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:", error);
});